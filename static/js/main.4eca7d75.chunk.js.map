{"version":3,"sources":["NavBar/NavBar.tsx","Banner/Banner.tsx","SectionHeader/SectionHeader.tsx","AboutMe/AboutMe.tsx","MyEducation/MyEducation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","useState","toggle","setToggle","navCollapsed","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","id","href","Banner","trail","useMemo","styles","map","element","index","push","animationDelay","style","SectionHeader","normalText","redText","AboutMe","MyEducation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4XA4CeA,MAzCf,WAAmB,IAAD,EACcC,oBAAS,GADvB,mBACPC,EADO,KACCC,EADD,KAERC,EAAeF,EAAS,WAAa,GAI3C,OACI,yBAAKG,UAAU,UACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,2BACX,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,oBAAoBC,QAPvM,WACfT,GAAWD,KAOK,0BAAMG,UAAU,uBACZ,kBAAC,IAAD,QAGR,yBAAKA,UAAS,UAAKD,EAAL,oBAAqCS,GAAG,0BAClD,wBAAIR,UAAU,sBACd,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWS,KAAK,KAA7B,MACC,0BAAMT,UAAU,iBAAhB,KACA,0BAAMA,UAAU,WAAhB,eAGL,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWS,KAAK,cAA7B,MACA,0BAAMT,UAAU,iBAAhB,OAGJ,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWS,KAAK,cAA7B,YACA,0BAAMT,UAAU,iBAAhB,a,MCNbU,MAzBf,WACI,IAAMC,EAAQC,mBAAQ,WAClB,IAAMC,EAAgB,GAOtB,MANA,CAAC,EAAG,EAAG,GAAGC,KAAI,SAACC,EAASC,GAItB,OAHAH,EAAOI,KAAK,CACVC,eAAe,GAAD,OAAa,IAARF,EAAL,QAET,QAEFH,IACN,IACL,OACI,yBAAKb,UAAU,UACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,wBACX,wBAAIA,UAAU,+BAA+BmB,MAAOR,EAAM,IAA1D,OACI,0BAAMX,UAAU,sCAAhB,oBAEJ,uBAAGA,UAAU,6BAA6BmB,MAAOR,EAAM,IAAvD,kOCJLS,G,MAV6C,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QACtE,OACI,yBAAKtB,UAAU,iBACX,wBAAIA,UAAU,yBAAyBqB,EACvC,0BAAMrB,UAAU,8BAA8BsB,O,MCG3CC,MAVf,WACI,OACI,yBAAKvB,UAAU,WACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAeqB,WAAW,UAAUC,QAAQ,S,MCM7CE,MAVf,WACI,OACI,yBAAKxB,UAAU,eACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAeqB,WAAW,WAAWC,QAAQ,S,MCU9CG,MAXf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4eca7d75.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './NavBar.scss';\nfunction NavBar() {\n    const [toggle, setToggle] = useState(true);\n    const navCollapsed = toggle ? 'collapse' : '';\n    const handleMenu = () => {\n        setToggle(!toggle);\n    };\n    return (\n        <div className=\"NavBar\">\n            <div className=\"container-fluid\">\n                <nav className=\"navbar navbar-expand-lg\">\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" onClick={handleMenu}>\n                        <span className=\"navbar-toggler-icon\">\n                            <MenuIcon />\n                        </span>\n                    </button>\n                    <div className={`${navCollapsed} navbar-collapse`} id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"/\">Hom\n                             <span className=\"nav-link__red\">e</span>\n                             <span className=\"sr-only\">(current)</span>\n                             </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#no-action\">App\n                            <span className=\"nav-link__red\">s</span>\n                            </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#no-action\">Contact M\n                            <span className=\"nav-link__red\">e</span>\n                            </a>\n                        </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, {useMemo} from 'react';\nimport './Banner.scss';\nfunction Banner() {\n    const trail = useMemo(() => {\n        const styles: any[] = [];\n        [0, 0, 0].map((element, index) => {\n          styles.push({\n            animationDelay: `${index * 250}ms`,\n          });\n          return null;\n        });\n        return styles;\n      }, []);\n    return (\n        <div className=\"banner\">\n            <div className=\"container\">\n                <div className=\"bannerInnerContainer\">\n                    <h2 className=\"bannerInnerContainer__header\" style={trail[0]}>I am \n                        <span className=\"bannerInnerContainer__header__name\">&nbsp;Ayar Hlaine</span>\n                    </h2>\n                    <p className=\"bannerInnerContainer__text\" style={trail[1]}>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit nostrum nihil nulla molestiae amet ex assumenda nesciunt id, similique neque sequi fugiat a! Mollitia accusamus exercitationem maxime eius! Aspernatur, vel!</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Banner;\n","import React, { FunctionComponent } from 'react';\nimport './SectionHeader.scss';\ninterface SectionHeaderProp {\n    normalText: string;\n    redText: string;\n}\nconst SectionHeader: FunctionComponent<SectionHeaderProp> = ({normalText, redText}) => {\n    return (\n        <div className=\"sectionHeader\">\n            <h3 className=\"sectionHeader__header\">{normalText}\n            <span className=\"sectionHeader__header--red\">{redText}</span>\n            </h3>\n        </div>\n    )\n}\n\nexport default SectionHeader\n","import React from 'react';\nimport SectionHeader from '../SectionHeader/SectionHeader';\nimport './AboutMe.scss';\nfunction AboutMe() {\n    return (\n        <div className=\"aboutMe\">\n            <div className=\"container\">\n                <SectionHeader normalText=\"About M\" redText=\"e\"/>\n            </div> \n        </div>\n    )\n}\n\nexport default AboutMe;\n","import React from 'react';\nimport SectionHeader from '../SectionHeader/SectionHeader';\nimport './MyEducation.scss';\nfunction MyEducation() {\n    return (\n        <div className=\"myEducation\">\n            <div className=\"container\">\n                <SectionHeader normalText=\"Educatio\" redText=\"n\"/>\n            </div> \n        </div>\n    )\n}\n\nexport default MyEducation;\n","import React from 'react';\nimport NavBar from './NavBar/NavBar';\nimport Banner from './Banner/Banner';\nimport AboutMe from './AboutMe/AboutMe';\nimport MyEducation from './MyEducation/MyEducation';\nimport './App.scss';\nfunction App() {\n  return (\n    <div className=\"app\">\n      <NavBar />\n      <Banner />\n      <AboutMe />\n      <MyEducation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}